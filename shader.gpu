

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texture;
varying vec2 vT;
uniform mat4 ModelViewProjectionMatrix;
uniform vec4 color;

uniform float scl;

mat4 translation(float tx, float ty, float tz) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = tx;
    dst[3][ 1] = ty;
    dst[3][ 2] = tz;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

uniform vec3 p;
uniform vec2 sp;

void main() {
    mat4 first = translation(-sp.x,-sp.y,0.);
    mat4 second = scaling(scl);
    mat4 third = translation(sp.x,sp.y,0.);
    vec4 f = first*vec4(texture.x,texture.y,0.,1.0);
    vec4 s = second*f;
    vec4 t = third*s;
    vT = vec2(t);
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    if(color.x<1.){
        gl_Position = ModelViewProjectionMatrix *translation(p.x,p.y,p.z)* vec4(vertex,1.0);
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
uniform sampler2D tmu;
varying vec2 vT;
uniform vec4 color;
void main() {
    gl_FragColor = texture2D(tmu, vT);
    if(color.x<1.){
        gl_FragColor = vec4(1.,0.,0.,1.);
    }
}`;