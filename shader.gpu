

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;

varying vec3 v;

uniform vec3 lightDir;
uniform vec3 lightPos;
uniform vec4 color;
uniform float limit;
varying vec3 vNormal;

void main() {
    vNormal = normal;
    v=vertex;
    //v=color.rgb*light+specular;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    if(color.b>0.0){
        gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 v;
varying vec3 vNormal;
uniform vec3 lightDir;
uniform vec3 lightPos;
uniform vec4 color;
uniform float limit;
void main() {
    vec3 toLight = normalize(lightPos-v);
    vec3 toView = normalize(-v);
    vec3 halfVector = normalize(toLight + toView);
    vec3 N = normalize(vNormal);
    float dotFromDirection = dot(toLight, 
                               -lightDir);
    float inLight = smoothstep(limit,limit+0.1, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 150.0);
    vec3 col = color.rgb*light+specular;
    //gl_FragColor = color;
    //gl_FragColor = vec4(normalize(v),1.0);
    gl_FragColor = vec4(col,1.0);
    if(color.b>0.0){
        gl_FragColor = color;
    }
}`;